#note
gP：自光标位置向左粘贴刚才复制的内容，结束之后把光标
    向右移动一个字符（这就是 g 的作用，为了把末尾的 . 保留
    住。你也可以使用 Pl 实现一样的目标）
D ：自光标位置删除到行尾


移动指令	移动效果
w b	       向前（右）或向后（左）移动光标至下一个词组的词头位置
e ge	   向前（右）或向后（左）移动光标至下一个词组的词尾位置

* 和 \#:  匹配光标当前所在的单词，移动光标到下一个（或上一个）匹配
单词（*是下一个，#是上一个）

H：将光标移到屏幕上方
J:将下一行合并到当前行
K:查看关键字
L：将光标移到屏幕下方

ctrl + g 显示文件名
命令模式下按1，再按ctrl + g 显示文件路径和文件信息

:q!放弃任何改动而退出vi，也就是强行退出
:w 存档
:w! 对于只读文件强行存档
:wq 存档并退出vi
:x 与wq 的工作一样
:zz 与wq 的工作一样

I 行首插入
X 向前删除一个字符
yy 复制一行
yw 复制一个单词
y$ 复制到行尾
w 切换单词
0 到行头
^ 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）
$ 到本行行尾
g_ 到本行最后一个不是blank字符的位置。
u undo
<C-r> redo
:saveas <path/to/file> → 另存为 <path/to/file>


#vim
`.  #转到上次编辑文件的地方

c命令和d命令相似，只是d命令删除完后不会进入插入模式，c命令会

reg  #查看寄存器

使用寄存器的命令为引号 " 
"kyy  #拷贝当前行到寄存器k
"kp   #粘贴寄存器k的内容到想要的位置

.  #重复输入的上一个命令
N<command> #重复某个命令N次

t  #英文to的意思，作用也类似

R  #执行替换光标处字符，直到按下esc

n1,n2 w filename #将n1行到n2行的数据另存为名为filename的文件

x  #如果文件有更改，则保存退出，否则，直接退出，会对文件时间有影响

w  #光标移动到后一词词首
W  #光标移动到后一词词首，且忽略标点符号
e  #光标移动到后一词词尾
E  #光标移动到后一词词尾，且忽略标点符号
b  #光标移动到前一词词首
B  #光标移动到前一词词首，且忽略标点符号

)  #光标移动到后一句的句首
(  #光标移动到前一句的句首
}  #光标移动到下一段的段首
{  #光标移动到上一段的段首

H  #光标移动到当前显示页面的第一行
M  #光标移动到当前显示页面的中间行
H  #光标移动到当前显示页面的最后一行

#相对于光标滚屏
在阅读代码时，有时我们需要根据光标所在的位置滚屏，把光标所在行移动窗口的
顶端、中间或底部，这时就可以用到"zt"、"zz"和"zb"。这种滚屏方式相对于翻页
来讲，它的好处在于，你能够始终以当前光标位置做为参照，不会出现翻几次页
后，发现自己迷失了方向
# 直接滚屏
Ctrl + F 屏幕向下滚动一屏
Ctrl + B 屏幕向上滚动一屏
Ctrl + E 屏幕向下滚动一行
Ctrl + Y 屏幕向上滚动一行
Ctrl + D 屏幕向下滚动半屏
Ctrl + U 屏幕向上滚动半屏

ctrl + o  #回到光标的上一位置
ctrl + i  #作用相反，配合使用

p  #粘贴到下一行
P  #粘贴当上一行

s/word1/word2/g  #替换，不显示提示字符
s/word1/word2/gc  #替换，显示确认（confirm）字符

ZZ与x作用相同  #若文件没有改动，则不存储离开，若文件已经改动，则存储后离开

vim -r 列出交换文件

v模式：
多行注释
(1)ctrl + v 进入v模式
(2)向上或向下移动光标
(3)把需要注释的行的开头标记起来
(4)然后按大写的I
(5)在插入注释符，比如#
(6)在退回到命令模式，即完成注释
删除多行注释
前面的步骤相似，上下移动选中之后，
无需按I，直接输入d

替换
% 引导全局替换
5, 10 替换第5到10行 ，具体命令如下：5,10s/xxx/xxx/g 

有关行号
显示行号 ：set nu
取消行号 ：set nonu

取消高亮 ：noh 

定位 ：出命令行输入行号，也可以直接输入行号，然后按gg或G

读入文件 ：r 文件路径

打开多个文件 ：vim -o xxx xxx xxx #竖排
               vim -O xxx xxx xxx #竖排
多个文件之间切换 ：ctrl + ww

自定义vim
set nu #显示行号
set history=10 #保存10条历史命令

#移动到指定字符
"f"命令移动到光标右边的指定字符上，例如，"fx"，会把移动到光标右边的第一个'x'字符上。"F"命令则反方向查找，也就是移动到光标左边的指定字符上。

"t"命令和"f"命令的区别在于，它移动到光标右边的指定字符之前。例如，"tx"会移动到光标右边第一个'x'字符的前面。"T"命令是"t"命令的反向版本，它移动到光标左边的指定字符之后。

这四个命令只在当前行中移动光标，光标不会跨越回车换行符。

可以在命令前面使用数字，表示倍数。例如，"3fx"表示移动到光标右边的第3个'x'字符上。

";"命令重复前一次输入的f, t, F, T命令，而","命令会反方向重复前一次输入的f, t, F, T命令。这两个命令前也可以使用数字来表示倍数。

#按单词移动和按字串移动
我们知道，英文文档的主体是单词，通常用空白字符(包括空格、制表符和回车换行符)来分隔单词。vim中提供了许多命令来按单词移动。

要根据单词来移动，首先要把文本分隔为一个个独立的单词。vim在对单词进行分隔时，会把'iskeyword'选项中的字符做为单词的组成字符。也就是说，一个单词(word)由'iskeyword'选项中定义的字符构成，它前面、后面的字符不在'iskeyword'选项定义的字符中。例如，如果我们把'iskeyword'选项设置为"a-z,A-Z,48-57,_"，那么"FooBar_123"被做为一个单词，而"FooBar-123"被做为三个单词："FooBar", "-"和"123"。"a-z,A-Z,48-57,_"中的48-57表示ASCII码表中的数字0-9。

vim中，移动光标到下一个单词的词首，使用命令"w"，移动光标到上一个单词的词首，使用命令"b"；移动光标到下一个单词的结尾，用命令"e"，移动光标到上一个单词的结尾，使用命令"ge"。

上面这些命令都使用'iskeyword'选项中的字符来确定单词的分界，还有几个命令，只把空白字符当做"单词"的分界。当然，这里说的"单词"已经不是传统意义上的单词了，而是由非空白字符构成一串字串。命令"W"移动光标到下个字串的开始，命令"B"移动到上个字串的开始；命令"E"移动到下个字串的结尾，命令"gE"移动到上个字串的结尾。和上面的命令比较一下，发现什么规律没有？

#一定要记住光标的移动，因为很多命令都可以和这些移动光标的命令连动。很多命令都可以如下来干：
<start position><command><end position>
例如 0y$ 命令意味着：
0 → 先到行头
y → 从这里开始拷贝
$ → 拷贝到本行最后一个字符
你可以输入 ye，从当前位置拷贝到本单词的最后一个字符。
你也可以输入 y2/foo 来拷贝2个 “foo” 之间的字符串。


#宏录制： qa 操作序列 q, @a, @@
qa 把你的操作记录在寄存器 a。
于是 @a 会replay被录制的宏。
@@ 是一个快捷键用来replay最新录制的宏。
示例:
在一个只有一行且这一行只有“1”的文本中，键入如下命令：
qaYp<C-a>q→
qa 开始录制
Yp 复制行.
<C-a> 增加1.
q 停止录制.
@a → 在1下面写下 2
@@ → 在2 正面写下3
现在做 100@@ 会创建新的100行，并把数据增加到 103.

#可视化选择： v,V,<C-v>
前面，我们看到了 <C-v>的示例 （在Windows下应该是<C-q>），我们可以使用 v 和 
V。一但被选好了，你可以做下面的事：

J → 把所有的行连接起来（变成一行）
< 或 > → 左右缩进
= → 自动给缩进 （陈皓注：这个功能相当强大，我太喜欢了）
在所有被选择的行后加上点东西：

<C-v>
选中相关的行 (可使用 j 或 <C-d> 或是 /pattern 或是 % 等……)
$ 到行最后
A, 输入字符串，按 ESC。

#分屏: :split 和 vsplit.
下面是主要的命令，你可以使用VIM的帮助 :help split. 你可以参考本站以前的一篇文章VIM分屏。

:split → 创建分屏 (:vsplit创建垂直分屏)
<C-w><dir> : dir就是方向，可以是 hjkl 或是 ←↓↑→ 中的一个，其用来切换分屏。
<C-w>_ (或 <C-w>|) : 最大化尺寸 (<C-w>| 垂直分屏)
<C-w>+ (或 <C-w>-) : 增加尺寸

vim在编辑的时候就可以打开多个文件：
:vs  或者 :vsplit  将当前窗口竖直分割，并在上面新窗口中显示当前文件
:vs filename 将当前窗口竖直分割，新文件在新窗口中显示
:sp 或者:sv或者:split  将当前窗口水平分割，并在左边新窗口中显示当前文件
:sp filename 将当前窗口竖直分割，新文件在左边新窗口中显示
:new 新建文件并竖直分割
:vnew 新建文件并水平分割
如果想让新窗口在右边或者下方打开，添加配置：
set splitbelow
set splitright
