#shell script定义：
shell script 是利用 shell 的功能所寫的一個『程式 (program
)』，這個程式是使用純文字檔，將一些 shell 的語法與指令(含
外部指令)寫在裡面， 搭配正規表示法、管線命令與資料流重導
向等功能，以達到我們所想要的處理目的。

#note
在变量设置中，双引号仍然可以保有变量的内容，但单引号内仅
能是一般字符，而不会有特殊符号。

优先执行的命令建议选择$()，而不是返单引号``

env  #查看当前环境变量
set  #查看环境变量和bash内的其他变量

当时用bash或sh指令执行shell脚本时，会在子程序bash内执行，执行结束后子程序的资源被移除，父程序看不到
使用source或者.则会在父程序bash内执行，各动作会在bash内生效。

使用中括號必須要特別注意:
因為中括號用在很多地方，包括萬用字元與正規表示法等等，所以如果要在 bash 的語法當中使用中括號作為 shell 的判斷式時，必須要注意中括號的兩端需要有空白字元來分隔喔！

 script 針對參數已經有設定好一些變數名稱了！對應如下：
/path/to/scriptname  opt1  opt2  opt3  opt4
       $0             $1    $2    $3    $4

除了這些數字的變數之外， 我們還有一些較為特殊的變數可以在 script 內使用來呼叫這些參數喔！
$# ：代表後接的參數『個數』，以上表為例這裡顯示為『 4 』；

shift #对脚本后面所接的参数进行偏移
"$@" ：代表『 "$1" "$2" "$3" "$4" 』之意，每個變數是獨立的(用雙引號括起來)；
"$*" ：代表『 "$1c$2c$3c$4" 』，其中 c 為分隔字元，預設為空白鍵， 所以本例中代表『 "$1 $2 $3 $4" 』之意。

if条件表达式：
if单分支：

if [ 條件判斷式 ]; then
	當條件判斷式成立時，可以進行的指令工作內容；
fi   <==將 if 反過來寫，就成為 fi 啦！結束 if 之意！

if多重条件判断（双分支）：

# 一個條件判斷，分成功進行與失敗進行 (else)
if [ 條件判斷式 ]; then
	當條件判斷式成立時，可以進行的指令工作內容；
else
	當條件判斷式不成立時，可以進行的指令工作內容；
fi

多分支：

# 多個條件判斷 (if ... elif ... elif ... else) 分多種不同情況執行
if [ 條件判斷式一 ]; then
	當條件判斷式一成立時，可以進行的指令工作內容；
elif [ 條件判斷式二 ]; then
	當條件判斷式二成立時，可以進行的指令工作內容；
else
	當條件判斷式一與二均不成立時，可以進行的指令工作內容；
fi


function 的語法是這樣的：

function fname() {  # fname 就是我們的自訂的執行指令名稱
	程式段  #程式段就是我們要他執行的內容了。
}
#注意：
因為 shell script 的執行方式是由上而下，由左而右， 因此在 shell script 當中
的 function 的設定一定要在程式的最前面， 這樣才能夠在執行時被找到可用的程式
段喔 (這一點與傳統程式語言差異相當大！初次接觸的朋友要小心！)！


#循环
一般來說，不定迴圈最常見的就是底下這兩種狀態了：

while [ condition ]  <==中括號內的狀態就是判斷式
do            <==do 是迴圈的開始！
	程式段落
done          <==done 是迴圈的結束

while 的中文是『當....時』，所以，這種方式說的是『當 condition 條件成立時，就進行迴圈，直到 
condition 的條件不成立才停止』的意思。還有另外一種不定迴圈的方式：

until [ condition ]
do
	程式段落
done

這種方式恰恰與 while 相反，它說的是『當 condition 條件成立時，就終止迴圈， 否則就持續進行迴圈的程式段。』

for...do...done  #固定迴圈
相對於 while, until 的迴圈方式是必須要『符合某個條件』的狀態， for 這種語法，則是『 已經知道要進行幾次迴圈』的狀態！他的語法是：

for var in con1 con2 con3 ...
do
	程式段
done
以上面的例子來說，這個 $var 的變數內容在迴圈工作時：

第一次迴圈時， $var 的內容為 con1 ；
第二次迴圈時， $var 的內容為 con2 ；
第三次迴圈時， $var 的內容為 con3 ；
....

#循环技术器
除了使用 $(seq 1 100) 之外，你也可以直接使用 bash 的內建機制來處理喔！可以
使用{1..100} 來取代 $(seq 1 100) ！那個大括號內的前面/後面用兩個字元，中間
以兩個小數點來代表連續出現的意思！例如要持續輸出a, b, c...g 的話， 就可以使
用『 echo {a..g} 』這樣的表示方式！

除了上述的方法之外，for 迴圈還有另外一種寫法！語法如下：

for (( 初始值; 限制值; 執行步階 ))
do
	程式段
done
這種語法適合於數值方式的運算當中，在 for 後面的括號內的三串內容意義為：

初始值：某個變數在迴圈當中的起始值，直接以類似 i=1 設定好；
限制值：當變數的值在這個限制值的範圍內，就繼續進行迴圈。例如 i<=100；
執行步階：每作一次迴圈時，變數的變化量。例如 i=i+1。


#debug
 sh [-nvx] scripts.sh
選項與參數：
-n  ：不要執行 script，僅查詢語法的問題；
-v  ：再執行 sccript 前，先將 scripts 的內容輸出到螢幕上；
-x  ：將使用到的 script 內容顯示到螢幕上，這是很有用的參數！

範例一：測試 dir_perm.sh 有無語法的問題？
[dmtsai@study ~]$ sh -n dir_perm.sh
# 若語法沒有問題，則不會顯示任何資訊！

範例二：將 show_animal.sh 的執行過程全部列出來～
#加号表示执行的指令
[dmtsai@study ~]$ sh -x show_animal.sh
+ PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/root/bin
+ export PATH
+ for animal in dog cat elephant
+ echo 'There are dogs.... '
There are dogs....
+ for animal in dog cat elephant
+ echo 'There are cats.... '
There are cats....
+ for animal in dog cat elephant
+ echo 'There are elephants.... '
There are elephants....
